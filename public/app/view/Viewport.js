/*
 * File: app/view/MyViewport.js
 *
 * This file was generated by Sencha Architect version 4.0.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.2.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.2.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('InOut.view.Viewport', {
    extend: 'Ext.container.Viewport',

    requires: [
        'InOut.view.incomingrequests.gridIncomingRequests',
        'InOut.view.outgoingrequests.gridOutgoingRequests',
        'InOut.view.archivedrequests.gridArchivedRequests',
        'InOut.view.request.windowRequest',
        'InOut.view.ViewportViewController',
        'InOut.view.ViewportViewModel',
        'Ext.tab.Panel',
        'Ext.button.Button',
        'Ext.tab.Tab',
        'Ext.grid.Panel',
        'Ext.grid.column.Number',
        'Ext.grid.column.Date',
        'Ext.grid.column.Boolean',
        'Ext.view.Table',
        'Ext.toolbar.Toolbar'
    ],

    //controller: 'viewportviewcontroller',
    viewModel: {type: 'viewportviewmodel'},

    layout: 'fit',

    items: [
        {
            xtype: 'tabpanel',
            title: 'Уведомления вне офиса',
            activeTab: 0,
            items: [
                {
                    xtype: 'gridoutgoingrequests',
                    id: 'gridoutgoingrequests1',
                    listeners:{
                        activate : function(){
                            this.getStore('storeOutgoingRequests').reload();
                        }

                    }
                },
                {
                    xtype: 'gridincomingrequests',
                    id: 'gridincomingrequests1',
                    title: 'Запросы на согласование мне',
                    listeners:{
                        activate : function(){
                            this.getStore('storeIncomingRequests').reload();
                        }
                    }
                },
                {
                    xtype: 'gridarchivedrequests',
                    title: 'Архив моих запросов',
                    listeners:{
                        activate : function(){
                            var me = this;
                            var startDate = Ext.getCmp('archive_date_begin').getSubmitValue();
                            var endDate = Ext.getCmp('archive_date_end').getSubmitValue();
                            me.view.getStore().getProxy().url = '/archivedrequestsrange/' + startDate + '/' + endDate;
                            me.view.getStore().load();
                            console.log(startDate, endDate, me.view.getStore().getProxy().url);
                        }
                    }
                }/*,
                {
                    xtype: 'gridarchivedrequests',
                    title: 'Все запросы'
                }*/
            ]
        }
    ]

});